# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: deploy app

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run ruff linter
      #----------------------------------------------
      - name: Run lint
        run: |
          source .venv/bin/activate
          ruff check .

  deploy:
    runs-on: self-hosted
    environment: prod
    env:
      PG_HOST: ${{ secrets.PG_HOST }}
      TG_MANI_BOT: ${{ secrets.TG_MANI_BOT }}
      PG_USER: ${{ secrets.PG_USER }}
      PG_PASS: ${{ secrets.PG_PASS }}
      PG_DB: ${{ secrets.PG_DB }}
    steps:
    - uses: actions/checkout@v2

    - name: Stop previous containers
      run: docker-compose down
        
    - name: Build new Docker image
      run: docker-compose build
      
    - name: Deploy app with Docker Compose
      run: docker-compose up -d